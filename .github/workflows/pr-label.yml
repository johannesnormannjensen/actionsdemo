name: PR Label

on: 
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  title-label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request.title;
            const match = title.match(/^(\w+)(\([a-z][- a-zA-Z0-9]*[a-zA-Z0-9]\))?: (.+)$/);
            if (!match) {
              core.setFailed(`Pull Request title '${title}' does not follow contributing rules! \nGo to https://github.com/dotnestech/nestext/wiki/Contributing for contributing rules`);
              return;
            }
            const commitType = match[1];
            const scope = match[2];
            const summary = match[3];
            if (!summary.match(/\w+/)){
              core.setFailed(`Pull Request summary '${summary}' should contain at least one word. \nGo to https://github.com/dotnestech/nestext/wiki/Contributing for contributing rules`);
              return;
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.payload.pull_request.head.ref;
            
            const existingLabels = context.payload.pull_request.labels.map(label => label.name);
            const existingPRLabels = existingLabels.filter(label => label.startsWith('pr:') && !label.includes('delete on merge'));
            const labels = [];
            
            let isProtectedBranch = false;
            try {
              const branchProtection = await github.rest.repos.getBranchProtection({ owner, repo, branch });
              isProtectedBranch = true;
            } catch(error) {
            }
            
            const commitTypeToPRLabel = {
              'build': 'pr:build',
              'ci': 'pr:ci',
              'chore': 'pr:chore',
              'docs': 'pr:documentation',
              'feat': 'pr:feature',
              'fix': 'pr:bugfix',
              'perf': 'pr:performance',
              'refact': 'pr:refactor',
              'revert': 'pr:revert',
              'style': 'pr:style',
              'test': 'pr:test',
              'hotfix': 'pr:hotfix',
            };

            const titleLabel = commitTypeToPRLabel[commitType];
            if(titleLabel) {
              labels.push(titleLabel)
            } else {
              core.setFailed(`Pull Request title '${title}' uses an unknown commitType '${commitType}'! \nGo to https://github.com/dotnestech/nestext/wiki/Contributing for contributing rules`);
              return;
            }

            const shouldDeleteOnMerge = isProtectedBranch || !['release', 'develop', 'main'].some(match => branch.includes(match));
            if(shouldDeleteOnMerge) {
              labels.push('pr:delete on merge');
            }
            
            const areNewPRLabelsAdded = labels.length && labels.some(label => !existingLabels.includes(label));
            const shouldSyncLabels = areNewPRLabelsAdded;
            if (shouldSyncLabels) {
              const issue_number = context.payload.pull_request.number;
              
              if(existingPRLabels.length) {
                await github.rest.issues.removeLabel({ owner, repo, issue_number, name: existingPRLabels });
              }
              
              await github.rest.issues.addLabels({ owner, repo, issue_number, labels });
            }
  